<?php

namespace Ath\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * EventAdminRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventAdminRepository extends EntityRepository
{
	/**
     * getFollowers => retourne les 12 prochains évènement à venir et en cours en fonctions des userInterets sports du user
     * 
     * @param  User $user
     * @return array of collection of this
     */
    public function getNotFinishedLimitEvents($user){

    	$interetsSports = $user->getUserInteretSports();
    	$sports = array();
    	foreach ($interetsSports as $oneSport) {
    		$sports[] = $oneSport->getId();
    	}

    	$now = new \DateTime();

        $query = $this->createQueryBuilder('ea')
            ->Join('ea.themeSports', 's')
            ->where('ea.dateFin > :now')
            ->andWhere('s.id IN (:sports)')
            ->orderBy('ea.dateDebut', 'DESC')
            ->setParameters(array(
                'sports' => $sports,
                'now' => $now
            ))
            ->getQuery()
            ->setMaxResults(12)
            ->getResult();

        return $query;
    }


    /**
     * getCountNotFinishedEvents => retourne le count des évènements future et en cours => non terminé en fonctions des userInterets sports du user
     * 
     * 
     * @param  User $user
     * @return array of collection of this
     */
    public function getCountNotFinishedEvents($user){

    	$interetsSports = $user->getUserInteretSports();
    	$sports = array();
    	foreach ($interetsSports as $oneSport) {
    		$sports[] = $oneSport->getId();
    	}

    	$now = new \DateTime();

        $query = $this->createQueryBuilder('ea')
            ->select('COUNT(ea)')
            ->Join('ea.themeSports', 's')
            ->where('ea.dateFin > :now')
            ->andWhere('s.id IN (:sports)')
            ->orderBy('ea.dateDebut', 'DESC')
            ->setParameters(array(
                'sports' => $sports,
                'now' => $now
            ))
            ->getQuery()
            ->getSingleScalarResult();

        return $query;
    }

    /**
     * getFollowers => retourne les 10 prochains évènement à venir et en cours en fonctions des userInterets sports du user
     * 
     * @param  User $user
     * @return array of collection of this
     */
    public function getTenNotFinishedLimitEvents($user, $first=0){
    	
    	$interetsSports = $user->getUserInteretSports();
    	$sports = array();
    	foreach ($interetsSports as $oneSport) {
    		$sports[] = $oneSport->getId();
    	}

    	$now = new \DateTime();

        $query = $this->createQueryBuilder('ea')
            ->Join('ea.themeSports', 's')
            ->where('ea.dateFin > :now')
            ->andWhere('s.id IN (:sports)')
            ->orderBy('ea.dateDebut', 'DESC')
            ->setParameters(array(
                'sports' => $sports,
                'now' => $now
            ))
            ->getQuery()
            ->setFirstResult($first)
            ->setMaxResults(10)
            ->getResult();

        return $query;
    }
}
