<?php

namespace Ath\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ProduitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitRepository extends EntityRepository
{
    public function getProduitAll() {
        $query = $this
            ->createQueryBuilder('p')
            ->getQuery();

        return $query->getResult();
    }
    
    public function getProduitList($page=1, $maxperpage=10)
    {
        $query = $this
            ->createQueryBuilder('p')
            ->getQuery();

        $query->setFirstResult(($page-1) * $maxperpage)
            ->setMaxResults($maxperpage);

        return new Paginator($query);
    }

    public function countProduit() {
        $query = $this
            ->createQueryBuilder('p')
            ->getQuery();
        return count($query);
    }

    /**
     * getMyProduct Retourne les produits créé par un user du plus récent au plus anciens
     * @param  User $user
     * @return ArrayCollection of this
     */
    public function getMyProducts($user) {
        $query = $this
            ->createQueryBuilder('p')
            ->where('p.createdBy = :user')
            ->setParameter('user', $user)
            ->orderBy('p.updatedAt', 'DESC')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * getLastProductsLimit Retourne les 20 derniers produits du plus récent au plus anciens
     * 
     * @param  User $user
     * @return ArrayCollection of this
     */
    public function getLastProductsLimit() {
        $query = $this
            ->createQueryBuilder('p')
            ->orderBy('p.updatedAt', 'DESC')
            ->setMaxResults(20)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * [getCategorieProduitFiltre description]
     * @param  array  $comparateur tableau de filtre
     * @param  integer $page
     * @param  integer $maxperpage
     * @return ArrayCollection of this
     */
    public function getCategorieProduitFiltre($comparateur,$page=1, $maxperpage=10)
    {
        $query = $this->createQueryBuilder('p');
        if(!empty($comparateur['myProduit'])) {
            foreach ($comparateur['myProduit'] as $oneMyProduit) {
                $comparateur['myProduit2'][] = $oneMyProduit->getId();
            }
            $query = $query
                ->where('p IN (:userComparateurProduit)')
                ->setParameter(
                    'userComparateurProduit', $comparateur['myProduit2']
                );
        }

        if(!empty($comparateur['categorieProduit'])) {
            foreach ($comparateur['categorieProduit'] as $oneCategorieProduit) {
                $comparateur['categorieProduit2'][] = $oneCategorieProduit->getId();
            }
            $query = $query
                ->Join('p.categorieProduit', 'c')
                ->andwhere('c IN (:categorieProduit)')
                ->setParameter(
                    'categorieProduit', $comparateur['categorieProduit2']
                );
        }
        if($comparateur['prix'] != 0) {
            switch($comparateur['prix']) {
                case '1':
                    $query = $query
                        ->andwhere('p.prix < :prix')
                        ->setParameter(
                            'prix', 100
                        );
                    break;
                case '2':
                    $query = $query
                        ->andwhere('p.prix > :prixInf and p.prix < :prixSup')
                        ->setParameter(
                            'prixInf',100)
                        ->setParameter(
                            'prixSup',499
                        )
                        ;
                    break;
                case '3':
                    $query = $query
                    ->andwhere('p.prix > :prix')
                    ->setParameter(
                        'prix', 499
                    );
                    break;
            }
        }

        $query = $query
            ->add('orderBy', 'p.libelle ASC')
            ->getQuery();

        $query->setFirstResult(($page-1) * $maxperpage)
            ->setMaxResults($maxperpage);

        return new Paginator($query);
    }
}
