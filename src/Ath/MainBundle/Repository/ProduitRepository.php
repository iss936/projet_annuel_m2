<?php

namespace Ath\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ProduitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitRepository extends EntityRepository
{
    public function getProduitAll() {
        $query = $this
            ->createQueryBuilder('p')
            ->getQuery();

        return $query->getResult();
    }
    
    public function getProduitList($page=1, $maxperpage=10)
    {
        $query = $this
            ->createQueryBuilder('p')
            ->getQuery();

        $query->setFirstResult(($page-1) * $maxperpage)
            ->setMaxResults($maxperpage);

        return new Paginator($query);
    }

    public function countProduit() {
        $query = $this
            ->createQueryBuilder('p')
            ->getQuery();
        return count($query);
    }

    public function getProduit($id) {
        $query = $this
            ->createQueryBuilder('p')
            ->where('p.id = :id')
            ->setParameter('id', $id)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * getMyProduct Retourne les produits créé par un user du plus récent au plus anciens
     * @param  User $user
     * @return ArrayCollection of this
     */
    public function getMyProducts($user) {
        $query = $this
            ->createQueryBuilder('p')
            ->where('p.createdBy = :user')
            ->setParameter('user', $user)
            ->orderBy('p.updatedAt', 'DESC')
            ->getQuery();

        return $query->getResult();
    }

    /**
     * getLastProductsLimit Retourne les 20 derniers produits du plus récent au plus anciens
     * 
     * @param  User $user
     * @return ArrayCollection of this
     */
    public function getLastProductsLimit() {
        $query = $this
            ->createQueryBuilder('p')
            ->orderBy('p.updatedAt', 'DESC')
            ->setMaxResults(20)
            ->getQuery();

        return $query->getResult();
    }

    public function getCategorieProduitFiltre($categorieProduit, $page=1, $maxperpage=10)
    {
        foreach ($categorieProduit as $oneCategorieProduit) {
            $categorieProduit2[] = $oneCategorieProduit->getId();
        }

        $query = $this
            ->createQueryBuilder('u')
            ->Join('u.categorieProduit', 'c')
            ->andWhere("c IN (:categorieProduit)")

            ->setParameters(array(
                'categorieProduit' => $categorieProduit2
            ))
            ->getQuery();

        $query->setFirstResult(($page-1) * $maxperpage)
            ->setMaxResults($maxperpage);

        return new Paginator($query);
    }
}
